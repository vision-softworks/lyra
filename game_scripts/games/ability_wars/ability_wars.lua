local StrToNumber = tonumber;
local Byte = string.byte;
local Char = string.char;
local Sub = string.sub;
local Subg = string.gsub;
local Rep = string.rep;
local Concat = table.concat;
local Insert = table.insert;
local LDExp = math.ldexp;
local GetFEnv = getfenv or function()
	return _ENV;
end;
local Setmetatable = setmetatable;
local PCall = pcall;
local Select = select;
local Unpack = unpack or table.unpack;
local ToNumber = tonumber;
local function VMCall(ByteString, vmenv, ...)
	local DIP = 1;
	local repeatNext;
	ByteString = Subg(Sub(ByteString, 5), "..", function(byte)
		if (Byte(byte, 2) == 81) then
			repeatNext = StrToNumber(Sub(byte, 1, 1));
			return "";
		else
			local a = Char(StrToNumber(byte, 16));
			if repeatNext then
				local b = Rep(a, repeatNext);
				repeatNext = nil;
				return b;
			else
				return a;
			end
		end
	end);
	local function gBit(Bit, Start, End)
		if End then
			local Res = (Bit / (2 ^ (Start - 1))) % (2 ^ (((End - 1) - (Start - 1)) + 1));
			return Res - (Res % 1);
		else
			local Plc = 2 ^ (Start - 1);
			return (((Bit % (Plc + Plc)) >= Plc) and 1) or 0;
		end
	end
	local function gBits8()
		local a = Byte(ByteString, DIP, DIP);
		DIP = DIP + 1;
		return a;
	end
	local function gBits16()
		local a, b = Byte(ByteString, DIP, DIP + 2);
		DIP = DIP + 2;
		return (b * 256) + a;
	end
	local function gBits32()
		local a, b, c, d = Byte(ByteString, DIP, DIP + 3);
		DIP = DIP + 4;
		return (d * 16777216) + (c * 65536) + (b * 256) + a;
	end
	local function gFloat()
		local Left = gBits32();
		local Right = gBits32();
		local IsNormal = 1;
		local Mantissa = (gBit(Right, 1, 20) * (2 ^ 32)) + Left;
		local Exponent = gBit(Right, 21, 31);
		local Sign = ((gBit(Right, 32) == 1) and -1) or 1;
		if (Exponent == 0) then
			if (Mantissa == 0) then
				return Sign * 0;
			else
				Exponent = 1;
				IsNormal = 0;
			end
		elseif (Exponent == 2047) then
			return ((Mantissa == 0) and (Sign * (1 / 0))) or (Sign * NaN);
		end
		return LDExp(Sign, Exponent - 1023) * (IsNormal + (Mantissa / (2 ^ 52)));
	end
	local function gString(Len)
		local Str;
		if not Len then
			Len = gBits32();
			if (Len == 0) then
				return "";
			end
		end
		Str = Sub(ByteString, DIP, (DIP + Len) - 1);
		DIP = DIP + Len;
		local FStr = {};
		for Idx = 1, #Str do
			FStr[Idx] = Char(Byte(Sub(Str, Idx, Idx)));
		end
		return Concat(FStr);
	end
	local gInt = gBits32;
	local function _R(...)
		return {...}, Select("#", ...);
	end
	local function Deserialize()
		local Instrs = {};
		local Functions = {};
		local Lines = {};
		local Chunk = {Instrs,Functions,nil,Lines};
		local ConstCount = gBits32();
		local Consts = {};
		for Idx = 1, ConstCount do
			local Type = gBits8();
			local Cons;
			if (Type == 1) then
				Cons = gBits8() ~= 0;
			elseif (Type == 2) then
				Cons = gFloat();
			elseif (Type == 3) then
				Cons = gString();
			end
			Consts[Idx] = Cons;
		end
		Chunk[3] = gBits8();
		for Idx = 1, gBits32() do
			local Descriptor = gBits8();
			if (gBit(Descriptor, 1, 1) == 0) then
				local Type = gBit(Descriptor, 2, 3);
				local Mask = gBit(Descriptor, 4, 6);
				local Inst = {gBits16(),gBits16(),nil,nil};
				if (Type == 0) then
					Inst[3] = gBits16();
					Inst[4] = gBits16();
				elseif (Type == 1) then
					Inst[3] = gBits32();
				elseif (Type == 2) then
					Inst[3] = gBits32() - (2 ^ 16);
				elseif (Type == 3) then
					Inst[3] = gBits32() - (2 ^ 16);
					Inst[4] = gBits16();
				end
				if (gBit(Mask, 1, 1) == 1) then
					Inst[2] = Consts[Inst[2]];
				end
				if (gBit(Mask, 2, 2) == 1) then
					Inst[3] = Consts[Inst[3]];
				end
				if (gBit(Mask, 3, 3) == 1) then
					Inst[4] = Consts[Inst[4]];
				end
				Instrs[Idx] = Inst;
			end
		end
		for Idx = 1, gBits32() do
			Functions[Idx - 1] = Deserialize();
		end
		return Chunk;
	end
	local function Wrap(Chunk, Upvalues, Env)
		local Instr = Chunk[1];
		local Proto = Chunk[2];
		local Params = Chunk[3];
		return function(...)
			local Instr = Instr;
			local Proto = Proto;
			local Params = Params;
			local _R = _R;
			local VIP = 1;
			local Top = -1;
			local Vararg = {};
			local Args = {...};
			local PCount = Select("#", ...) - 1;
			local Lupvals = {};
			local Stk = {};
			for Idx = 0, PCount do
				if (Idx >= Params) then
					Vararg[Idx - Params] = Args[Idx + 1];
				else
					Stk[Idx] = Args[Idx + 1];
				end
			end
			local Varargsz = (PCount - Params) + 1;
			local Inst;
			local Enum;
			while true do
				Inst = Instr[VIP];
				Enum = Inst[1];
				if (Enum <= 31) then
					if (Enum <= 15) then
						if (Enum <= 7) then
							if (Enum <= 3) then
								if (Enum <= 1) then
									if (Enum > 0) then
										Stk[Inst[2]] = Inst[3] + Stk[Inst[4]];
									else
										Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
									end
								elseif (Enum > 2) then
									Stk[Inst[2]][Stk[Inst[3]]] = Inst[4];
								else
									Stk[Inst[2]] = Upvalues[Inst[3]];
								end
							elseif (Enum <= 5) then
								if (Enum > 4) then
									local A = Inst[2];
									Stk[A](Unpack(Stk, A + 1, Top));
								else
									local A = Inst[2];
									do
										return Stk[A](Unpack(Stk, A + 1, Inst[3]));
									end
								end
							elseif (Enum == 6) then
								Stk[Inst[2]] = Stk[Inst[3]] + Stk[Inst[4]];
							else
								local A = Inst[2];
								Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
							end
						elseif (Enum <= 11) then
							if (Enum <= 9) then
								if (Enum == 8) then
									Stk[Inst[2]] = Inst[3];
								elseif not Stk[Inst[2]] then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							elseif (Enum > 10) then
								Stk[Inst[2]] = Inst[3];
							else
								local A = Inst[2];
								local Index = Stk[A];
								local Step = Stk[A + 2];
								if (Step > 0) then
									if (Index > Stk[A + 1]) then
										VIP = Inst[3];
									else
										Stk[A + 3] = Index;
									end
								elseif (Index < Stk[A + 1]) then
									VIP = Inst[3];
								else
									Stk[A + 3] = Index;
								end
							end
						elseif (Enum <= 13) then
							if (Enum == 12) then
								Stk[Inst[2]][Inst[3]] = Inst[4];
							else
								Stk[Inst[2]] = Stk[Inst[3]] + Inst[4];
							end
						elseif (Enum == 14) then
							Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
						else
							Stk[Inst[2]] = Stk[Inst[3]];
						end
					elseif (Enum <= 23) then
						if (Enum <= 19) then
							if (Enum <= 17) then
								if (Enum > 16) then
									Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
								else
									local A = Inst[2];
									local Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Top)));
									Top = (Limit + A) - 1;
									local Edx = 0;
									for Idx = A, Top do
										Edx = Edx + 1;
										Stk[Idx] = Results[Edx];
									end
								end
							elseif (Enum == 18) then
								local A = Inst[2];
								Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
							else
								local A = Inst[2];
								Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
							end
						elseif (Enum <= 21) then
							if (Enum > 20) then
								local A = Inst[2];
								do
									return Stk[A](Unpack(Stk, A + 1, Inst[3]));
								end
							else
								local A = Inst[2];
								Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
							end
						elseif (Enum == 22) then
							Stk[Inst[2]] = Env[Inst[3]];
						else
							Stk[Inst[2]] = Inst[3] + Stk[Inst[4]];
						end
					elseif (Enum <= 27) then
						if (Enum <= 25) then
							if (Enum > 24) then
								local A = Inst[2];
								local Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Top)));
								Top = (Limit + A) - 1;
								local Edx = 0;
								for Idx = A, Top do
									Edx = Edx + 1;
									Stk[Idx] = Results[Edx];
								end
							elseif not Stk[Inst[2]] then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						elseif (Enum == 26) then
							local A = Inst[2];
							Stk[A] = Stk[A]();
						else
							local A = Inst[2];
							local B = Stk[Inst[3]];
							Stk[A + 1] = B;
							Stk[A] = B[Inst[4]];
						end
					elseif (Enum <= 29) then
						if (Enum > 28) then
							local A = Inst[2];
							local B = Stk[Inst[3]];
							Stk[A + 1] = B;
							Stk[A] = B[Inst[4]];
						else
							local A = Inst[2];
							local Results, Limit = _R(Stk[A](Stk[A + 1]));
							Top = (Limit + A) - 1;
							local Edx = 0;
							for Idx = A, Top do
								Edx = Edx + 1;
								Stk[Idx] = Results[Edx];
							end
						end
					elseif (Enum > 30) then
						Stk[Inst[2]] = Stk[Inst[3]] % Stk[Inst[4]];
					else
						do
							return;
						end
					end
				elseif (Enum <= 47) then
					if (Enum <= 39) then
						if (Enum <= 35) then
							if (Enum <= 33) then
								if (Enum > 32) then
									Stk[Inst[2]][Inst[3]] = Inst[4];
								else
									Stk[Inst[2]] = Stk[Inst[3]] + Inst[4];
								end
							elseif (Enum == 34) then
								local A = Inst[2];
								local Step = Stk[A + 2];
								local Index = Stk[A] + Step;
								Stk[A] = Index;
								if (Step > 0) then
									if (Index <= Stk[A + 1]) then
										VIP = Inst[3];
										Stk[A + 3] = Index;
									end
								elseif (Index >= Stk[A + 1]) then
									VIP = Inst[3];
									Stk[A + 3] = Index;
								end
							else
								Stk[Inst[2]] = Stk[Inst[3]] % Stk[Inst[4]];
							end
						elseif (Enum <= 37) then
							if (Enum > 36) then
								Stk[Inst[2]] = Upvalues[Inst[3]];
							else
								local NewProto = Proto[Inst[3]];
								local NewUvals;
								local Indexes = {};
								NewUvals = Setmetatable({}, {__index=function(_, Key)
									local Val = Indexes[Key];
									return Val[1][Val[2]];
								end,__newindex=function(_, Key, Value)
									local Val = Indexes[Key];
									Val[1][Val[2]] = Value;
								end});
								for Idx = 1, Inst[4] do
									VIP = VIP + 1;
									local Mvm = Instr[VIP];
									if (Mvm[1] == 15) then
										Indexes[Idx - 1] = {Stk,Mvm[3]};
									else
										Indexes[Idx - 1] = {Upvalues,Mvm[3]};
									end
									Lupvals[#Lupvals + 1] = Indexes;
								end
								Stk[Inst[2]] = Wrap(NewProto, NewUvals, Env);
							end
						elseif (Enum == 38) then
							Stk[Inst[2]] = Stk[Inst[3]] % Inst[4];
						else
							Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
						end
					elseif (Enum <= 43) then
						if (Enum <= 41) then
							if (Enum == 40) then
								Stk[Inst[2]] = Env[Inst[3]];
							else
								Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
							end
						elseif (Enum == 42) then
							VIP = Inst[3];
						else
							Stk[Inst[2]] = Stk[Inst[3]] % Inst[4];
						end
					elseif (Enum <= 45) then
						if (Enum == 44) then
							local A = Inst[2];
							local Results, Limit = _R(Stk[A](Stk[A + 1]));
							Top = (Limit + A) - 1;
							local Edx = 0;
							for Idx = A, Top do
								Edx = Edx + 1;
								Stk[Idx] = Results[Edx];
							end
						else
							local A = Inst[2];
							local Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
							Top = (Limit + A) - 1;
							local Edx = 0;
							for Idx = A, Top do
								Edx = Edx + 1;
								Stk[Idx] = Results[Edx];
							end
						end
					elseif (Enum == 46) then
						Stk[Inst[2]][Stk[Inst[3]]] = Inst[4];
					else
						Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
					end
				elseif (Enum <= 55) then
					if (Enum <= 51) then
						if (Enum <= 49) then
							if (Enum == 48) then
								local A = Inst[2];
								local Step = Stk[A + 2];
								local Index = Stk[A] + Step;
								Stk[A] = Index;
								if (Step > 0) then
									if (Index <= Stk[A + 1]) then
										VIP = Inst[3];
										Stk[A + 3] = Index;
									end
								elseif (Index >= Stk[A + 1]) then
									VIP = Inst[3];
									Stk[A + 3] = Index;
								end
							else
								Stk[Inst[2]] = {};
							end
						elseif (Enum == 50) then
							local A = Inst[2];
							local Index = Stk[A];
							local Step = Stk[A + 2];
							if (Step > 0) then
								if (Index > Stk[A + 1]) then
									VIP = Inst[3];
								else
									Stk[A + 3] = Index;
								end
							elseif (Index < Stk[A + 1]) then
								VIP = Inst[3];
							else
								Stk[A + 3] = Index;
							end
						else
							VIP = Inst[3];
						end
					elseif (Enum <= 53) then
						if (Enum > 52) then
							local A = Inst[2];
							Stk[A](Unpack(Stk, A + 1, Top));
						else
							Stk[Inst[2]] = #Stk[Inst[3]];
						end
					elseif (Enum == 54) then
						local A = Inst[2];
						Stk[A] = Stk[A]();
					else
						local A = Inst[2];
						local Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
						Top = (Limit + A) - 1;
						local Edx = 0;
						for Idx = A, Top do
							Edx = Edx + 1;
							Stk[Idx] = Results[Edx];
						end
					end
				elseif (Enum <= 59) then
					if (Enum <= 57) then
						if (Enum > 56) then
							Stk[Inst[2]] = {};
						else
							Stk[Inst[2]] = #Stk[Inst[3]];
						end
					elseif (Enum > 58) then
						do
							return;
						end
					else
						Stk[Inst[2]] = Stk[Inst[3]] + Stk[Inst[4]];
					end
				elseif (Enum <= 61) then
					if (Enum > 60) then
						local A = Inst[2];
						do
							return Unpack(Stk, A, Top);
						end
					else
						Stk[Inst[2]] = Stk[Inst[3]];
					end
				elseif (Enum > 62) then
					local A = Inst[2];
					do
						return Unpack(Stk, A, Top);
					end
				else
					local NewProto = Proto[Inst[3]];
					local NewUvals;
					local Indexes = {};
					NewUvals = Setmetatable({}, {__index=function(_, Key)
						local Val = Indexes[Key];
						return Val[1][Val[2]];
					end,__newindex=function(_, Key, Value)
						local Val = Indexes[Key];
						Val[1][Val[2]] = Value;
					end});
					for Idx = 1, Inst[4] do
						VIP = VIP + 1;
						local Mvm = Instr[VIP];
						if (Mvm[1] == 15) then
							Indexes[Idx - 1] = {Stk,Mvm[3]};
						else
							Indexes[Idx - 1] = {Upvalues,Mvm[3]};
						end
						Lupvals[#Lupvals + 1] = Indexes;
					end
					Stk[Inst[2]] = Wrap(NewProto, NewUvals, Env);
				end
				VIP = VIP + 1;
			end
		end;
	end
	return Wrap(Deserialize(), {}, vmenv)(...);
end
return VMCall("LOL!A93Q0003063Q00737472696E6703043Q006368617203043Q00627974652Q033Q0073756203053Q0062697433322Q033Q0062697403043Q0062786F7203053Q007461626C6503063Q00636F6E63617403063Q00696E73657274030A3Q006C6F6164737472696E6703043Q0067616D6503073Q00482Q7470476574031C3Q00D331F2ABD4658C9436EFA9CE2AD09528E3B5D270D1DA3CE0B2C233C703073Q00A3BB4586DBA75F03093Q00F92FDDC7653B2FC23803073Q0043AD4AA5B3265403063Q00436F6C6F723303073Q0066726F6D524742025Q00A06E40025Q00C06C40030A3Q0034BD2Q25F942195C18B803083Q002976DC464E9E3076026Q003440026Q00244003063Q00E2F4BB2613C403053Q0072B69BCB44026Q003E40026Q002E4003063Q0040ADBFFC492103063Q005613C5DE9826026Q00144003163Q00D24F6CEC7B4F35FD5471EA736437FF4B7FF7725338F803073Q00569C2018851D26026Q003A40026Q002C40031D3Q00898A57A17B7554A6914AA7735D54B38C4CA66E5E56A48E44BA726959A303073Q0037C7E523C81D1C026Q004940025Q00804140030D3Q0040FBDE161277F1DB261C61F4D803053Q0073149ABC54026Q00424003093Q00E5DE8F1F95ADDED48803063Q00DFB1BFED4CE103153Q0062C8A2185133B051DBAF2F5E348853C5A5394435BF03073Q00DB36A9C05A3050026Q005240030C3Q007D4302114C5A1406464E0F3703043Q0045292260025Q00406A40025Q0040654003143Q008FC6DB0F013FB9C7E30B001FB9DBC3290D27B3D103063Q004BDCA3B76A62025Q00E06F40025Q00806B4003113Q0027B68E3ADC0CAEA936DA09BD9938CC0CBE03053Q00B962DAEB57026Q002Q40026Q00324003163Q00EE3022EBDBA4DF1E26E5D5ADD93332E8DA82C42A22F403063Q00CAAB5C4786BE026Q004540026Q003840031A3Q001AC42F8727C52D9A30E4208D24C4229C0BC02F832ED3239D27C503043Q00E849A14C026Q003040030D3Q009ED547501BB5CD71490CB4D24703053Q007EDBB9223D025Q00805140026Q00444003163Q003FCB5D7D7073F2F515EB52777372FDF33FDA4C7D757203083Q00876CAE3E121E1793025Q00804B4003103Q0085E523CF1DBC11C6B5E22DD917BB3DC303083Q00A7D6894AAB78CE53025Q00806140030E3Q00B8FC3B59FDB5BBE23D5AEAA298E303063Q00C7EB90523D98026Q005940030C3Q00341AB02F02048A3F1519B22E03043Q004B6776D9026Q005E4003103Q00F35B7713B51BE555731FBE0CC8417E1003063Q007EA7341074D9030D3Q00FC212787B81CD9C62F228CB11D03073Q009CA84E40E0D479030E3Q0033E1A2C90BEB81C714EFA7C202EA03043Q00AE678EC503133Q006227583F295BDD58295D34205ACB423A50332003073Q009836483F58453E025Q0040604003143Q00E0CBE95BD8C1CA55C7C5EC50D1C0DD48C6CBE55903043Q003CB4A48E03183Q006C51022E2BE837565F072522E93D4D4A003B14F90057550003073Q0072383E6549478D025Q00C0624003193Q008CE6DCC3B4ECFFCDABE8D9C8BDEDF4D1ACECC9F7ACFBD4CFBD03043Q00A4D889BB03103Q00F6F43E2QA2F11CDCD534BEA3FD1FD7E203073Q006BB28651D2C69E026Q00394003123Q002Q1C8DD6AE37198CF3A42B0B8EC3A92C0B8603053Q00CA586EE2A6030F3Q00EA0192E2DEE10E81FCCDD10097F9CE03053Q00AAA36FE297030B3Q00383EA22D5A043D033FB93D03073Q00497150D2582E5703103Q00B120CC11E28923C116E2930FC21EE89303053Q0087E14CAD72025Q00806640030C3Q0043726561746557696E646F7703043Q0034EC2QB503073Q00C77A8DD8D0CCDD030D3Q00A8C513F568E2A4D21EBE6AF3A903063Q0096CDBD70901803043Q000C87B04203083Q007045E4DF2C64E87100030C3Q00F81006D7BF7281E01613DFB303073Q00E6B47F67B3D61C030D3Q00891D5C43F455E9830B1154E14503073Q0080EC653F268421030F3Q0080A61040BFE5C89FBC1350BFFFC3A903073Q00AFCCC97124D68B030A3Q004BC334D80D49CB7B924A03053Q006427AC55BC03053Q009970BC8D3603053Q0053CD18D9E0030F3Q00D22QCA3AEAC0F814CDC0D43FEFCBC903043Q005D86A5AD03013Q004B03163Q009AFBD2C338C2B74CBFEBC7CB3FC2B64EACFDCCD22EDD03083Q001EDE92A1A25AAED22Q0103143Q00C147630BE7427528F0477C0ED24F6204EC40771903043Q006A852E1003133Q007B2F7DFA53474D3272E8534F561372EA534E5F03063Q00203840139C3A03073Q007FC6E45456F78403073Q00E03AA885363A920100030A3Q007F5947F97094A90A545303083Q006B39362B9D15E6E703083Q00FD821DF097DDC2DE03073Q00AFBBEB7195D9BC030D3Q0039B78249F36D7133A1CF5EE67D03073Q00185CCFE12C831903093Q0043726561746554616203073Q007DDAAB591A715803063Q001D2BB3D82C7B03083Q00AEDA2142F0DC394903043Q002CDDB94003063Q0022E8455D721503053Q00136187283F03063Q00BD4B3C292B2203063Q0051CE3C535B4F03063Q006DA7D97721D703083Q00C42ECBB0124FA32D03083Q00BB2D730E31EFEAAA03073Q008FD8421E7E449B03073Q009FDC04C7CCB7CE03083Q0081CAA86DABA5C3B703063Q002A593AD5DB0603073Q0086423857B8BE7403043Q0009220CA903083Q00555C5169DB798B4103113Q00EEA245446EDAB0A643406E92EFBC454B7803063Q00BF9DD330251C00F9012Q0012283Q00013Q0020115Q0002001228000100013Q002011000100010003001228000200013Q002011000200020004001228000300053Q0006090003000A0001000100042A3Q000A0001001228000300063Q002011000400030007001228000500083Q002011000500050009001228000600083Q00201100060006000A00062400073Q000100062Q000F3Q00064Q000F8Q000F3Q00044Q000F3Q00014Q000F3Q00024Q000F3Q00053Q0012280008000B3Q0012280009000C3Q00201D00090009000D2Q003C000B00073Q001208000C000E3Q001208000D000F4Q0037000B000D4Q001900096Q001200083Q00022Q001A0008000100022Q003100093Q00182Q003C000A00073Q001208000B00103Q001208000C00114Q0013000A000C0002001228000B00123Q002011000B000B0013001208000C00143Q001208000D00153Q001208000E00154Q0013000B000E00022Q00290009000A000B2Q003C000A00073Q001208000B00163Q001208000C00174Q0013000A000C0002001228000B00123Q002011000B000B0013001208000C00183Q001208000D00193Q001208000E00194Q0013000B000E00022Q00290009000A000B2Q003C000A00073Q001208000B001A3Q001208000C001B4Q0013000A000C0002001228000B00123Q002011000B000B0013001208000C001C3Q001208000D001D3Q001208000E001D4Q0013000B000E00022Q00290009000A000B2Q003C000A00073Q001208000B001E3Q001208000C001F4Q0013000A000C0002001228000B00123Q002011000B000B0013001208000C00193Q001208000D00203Q001208000E00204Q0013000B000E00022Q00290009000A000B2Q003C000A00073Q001208000B00213Q001208000C00224Q0013000A000C0002001228000B00123Q002011000B000B0013001208000C00233Q001208000D00243Q001208000E00244Q0013000B000E00022Q00290009000A000B2Q003C000A00073Q001208000B00253Q001208000C00264Q0013000A000C0002001228000B00123Q002011000B000B0013001208000C00273Q001208000D00283Q001208000E00284Q0013000B000E00022Q00290009000A000B2Q003C000A00073Q001208000B00293Q001208000C002A4Q0013000A000C0002001228000B00123Q002011000B000B0013001208000C002B3Q001208000D00183Q001208000E00184Q0013000B000E00022Q00290009000A000B2Q003C000A00073Q001208000B002C3Q001208000C002D4Q0013000A000C0002001228000B00123Q002011000B000B0013001208000C00273Q001208000D001C3Q001208000E001C4Q0013000B000E00022Q00290009000A000B2Q003C000A00073Q001208000B002E3Q001208000C002F4Q0013000A000C0002001228000B00123Q002011000B000B0013001208000C00303Q001208000D002B3Q001208000E002B4Q0013000B000E00022Q00290009000A000B2Q003C000A00073Q001208000B00313Q001208000C00324Q0013000A000C0002001228000B00123Q002011000B000B0013001208000C00333Q001208000D00343Q001208000E00344Q0013000B000E00022Q00290009000A000B2Q003C000A00073Q001208000B00353Q001208000C00364Q0013000A000C0002001228000B00123Q002011000B000B0013001208000C00373Q001208000D00383Q001208000E00384Q0013000B000E00022Q00290009000A000B2Q003C000A00073Q001208000B00393Q001208000C003A4Q0013000A000C0002001228000B00123Q002011000B000B0013001208000C003B3Q001208000D003C3Q001208000E003C4Q0013000B000E00022Q00290009000A000B2Q003C000A00073Q001208000B003D3Q001208000C003E4Q0013000A000C0002001228000B00123Q002011000B000B0013001208000C003F3Q001208000D00403Q001208000E00404Q0013000B000E00022Q00290009000A000B2Q003C000A00073Q001208000B00413Q001208000C00424Q0013000A000C0002001228000B00123Q002011000B000B0013001208000C00233Q001208000D00433Q001208000E00434Q0013000B000E00022Q00290009000A000B2Q003C000A00073Q001208000B00443Q001208000C00454Q0013000A000C0002001228000B00123Q002011000B000B0013001208000C00463Q001208000D00473Q001208000E00474Q0013000B000E00022Q00290009000A000B2Q003C000A00073Q001208000B00483Q001208000C00494Q0013000A000C0002001228000B00123Q002011000B000B0013001208000C004A3Q001208000D00283Q001208000E00284Q0013000B000E00022Q00290009000A000B2Q003C000A00073Q001208000B004B3Q001208000C004C4Q0013000A000C0002001228000B00123Q002011000B000B0013001208000C004D3Q001208000D00463Q001208000E00464Q0013000B000E00022Q00290009000A000B2Q003C000A00073Q001208000B004E3Q001208000C004F4Q0013000A000C0002001228000B00123Q002011000B000B0013001208000C00383Q001208000D00503Q001208000E00504Q0013000B000E00022Q00290009000A000B2Q003C000A00073Q001208000B00513Q001208000C00524Q0013000A000C0002001228000B00123Q002011000B000B0013001208000C00373Q001208000D00533Q001208000E00534Q0013000B000E00022Q00290009000A000B2Q003C000A00073Q001208000B00543Q001208000C00554Q0013000A000C0002001228000B00123Q002011000B000B0013001208000C003B3Q001208000D00183Q001208000E00184Q0013000B000E00022Q00290009000A000B2Q003C000A00073Q001208000B00563Q001208000C00574Q0013000A000C0002001228000B00123Q002011000B000B0013001208000C00383Q001208000D00503Q001208000E00504Q0013000B000E00022Q00290009000A000B2Q003C000A00073Q001208000B00583Q001208000C00594Q0013000A000C0002001228000B00123Q002011000B000B0013001208000C00503Q001208000D00503Q001208000E00504Q0013000B000E00022Q00290009000A000B2Q003C000A00073Q001208000B005A3Q001208000C005B4Q0013000A000C0002001228000B00123Q002011000B000B0013001208000C00373Q001208000D005C3Q001208000E005C4Q0013000B000E00022Q00290009000A000B2Q003C000A00073Q001208000B005D3Q001208000C005E4Q0013000A000C0002001228000B00123Q002011000B000B0013001208000C00463Q001208000D00463Q001208000E00464Q0013000B000E00022Q00290009000A000B2Q003C000A00073Q001208000B005F3Q001208000C00604Q0013000A000C0002001228000B00123Q002011000B000B0013001208000C00373Q001208000D00613Q001208000E00614Q0013000B000E00022Q00290009000A000B2Q003C000A00073Q001208000B00623Q001208000C00634Q0013000A000C0002001228000B00123Q002011000B000B0013001208000C00273Q001208000D00273Q001208000E00274Q0013000B000E00022Q00290009000A000B2Q003C000A00073Q001208000B00643Q001208000C00654Q0013000A000C0002001228000B00123Q002011000B000B0013001208000C00473Q001208000D00663Q001208000E00664Q0013000B000E00022Q00290009000A000B2Q003C000A00073Q001208000B00673Q001208000C00684Q0013000A000C0002001228000B00123Q002011000B000B0013001208000C003B3Q001208000D00183Q001208000E00184Q0013000B000E00022Q00290009000A000B2Q003C000A00073Q001208000B00693Q001208000C006A4Q0013000A000C0002001228000B00123Q002011000B000B0013001208000C001C3Q001208000D003C3Q001208000E003C4Q0013000B000E00022Q00290009000A000B2Q003C000A00073Q001208000B006B3Q001208000C006C4Q0013000A000C0002001228000B00123Q002011000B000B0013001208000C00463Q001208000D00273Q001208000E00274Q0013000B000E00022Q00290009000A000B2Q003C000A00073Q001208000B006D3Q001208000C006E4Q0013000A000C0002001228000B00123Q002011000B000B0013001208000C00333Q001208000D006F3Q001208000E006F4Q0013000B000E00022Q00290009000A000B00201D000A000800702Q0031000C3Q00092Q003C000D00073Q001208000E00713Q001208000F00724Q0013000D000F00022Q003C000E00073Q001208000F00733Q001208001000744Q0013000E001000022Q0029000C000D000E2Q003C000D00073Q001208000E00753Q001208000F00764Q0013000D000F0002002003000C000D00772Q003C000D00073Q001208000E00783Q001208000F00794Q0013000D000F00022Q003C000E00073Q001208000F007A3Q0012080010007B4Q0013000E001000022Q0029000C000D000E2Q003C000D00073Q001208000E007C3Q001208000F007D4Q0013000D000F00022Q003C000E00073Q001208000F007E3Q0012080010007F4Q0013000E001000022Q0029000C000D000E2Q003C000D00073Q001208000E00803Q001208000F00814Q0013000D000F00022Q0029000C000D00092Q003C000D00073Q001208000E00823Q001208000F00834Q0013000D000F0002002003000C000D00842Q003C000D00073Q001208000E00853Q001208000F00864Q0013000D000F0002002003000C000D00872Q003C000D00073Q001208000E00883Q001208000F00894Q0013000D000F0002002003000C000D00872Q003C000D00073Q001208000E008A3Q001208000F008B4Q0013000D000F00022Q0031000E3Q00032Q003C000F00073Q0012080010008C3Q0012080011008D4Q0013000F00110002002003000E000F008E2Q003C000F00073Q0012080010008F3Q001208001100904Q0013000F00110002002003000E000F00772Q003C000F00073Q001208001000913Q001208001100924Q0013000F001100022Q003C001000073Q001208001100933Q001208001200944Q00130010001200022Q0029000E000F00102Q0029000C000D000E2Q0013000A000C000200201D000B000A00952Q003C000D00073Q001208000E00963Q001208000F00974Q0013000D000F00022Q003C000E00073Q001208000F00983Q001208001000994Q0037000E00104Q0012000B3Q000200201D000C000A00952Q003C000E00073Q001208000F009A3Q0012080010009B4Q0013000E001000022Q003C000F00073Q0012080010009C3Q0012080011009D4Q0037000F00114Q0012000C3Q000200201D000D000A00952Q003C000F00073Q0012080010009E3Q0012080011009F4Q0013000F001100022Q003C001000073Q001208001100A03Q001208001200A14Q0037001000124Q0012000D3Q000200201D000E000A00952Q003C001000073Q001208001100A23Q001208001200A34Q00130010001200022Q003C001100073Q001208001200A43Q001208001300A54Q0037001100134Q0012000E3Q000200201D000F000A00952Q003C001100073Q001208001200A63Q001208001300A74Q00130011001300022Q003C001200073Q001208001300A83Q001208001400A94Q0037001200144Q0012000F3Q00022Q001E3Q00013Q00013Q00093Q0003023Q005F4703023Q00437303073Q005551532Q442Q41026Q00084003083Q00594153444D525841026Q00F03F03083Q005941536130412Q56027Q0040026Q007040022F4Q003100025Q001228000300014Q003100043Q000300302100040003000400302100040005000600302100040007000800102Q000300020004001208000300064Q003800045Q001208000500063Q00040A0003002A00012Q000200076Q003C000800024Q0002000900014Q0002000A00024Q0002000B00034Q0002000C00044Q003C000D6Q003C000E00063Q001228000F00024Q0038000F000F4Q003A000F0006000F00200D000F000F00062Q0037000C000F4Q0012000B3Q00022Q0002000C00034Q0002000D00044Q003C000E00014Q0038000F00014Q001F000F0006000F001001000F0006000F2Q0038001000014Q001F00100006001000100100100006001000200D0010001000062Q0037000D00104Q0019000C6Q0012000A3Q0002002026000A000A00092Q001C0009000A4Q000500073Q00010004300003000B00012Q0002000300054Q003C000400024Q0004000300044Q003D00036Q001E3Q00017Q00", GetFEnv(), ...);
